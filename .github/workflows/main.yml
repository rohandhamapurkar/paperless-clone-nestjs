# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Deploy Paperless API

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-2 # preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: paperless-api-server # Amazon ECR repository name
  ECS_SERVICE: plc-api-service # Amazon ECS service name
  ECS_CLUSTER: plc-cluster # Amazon ECS cluster name
  ECS_TASK_DEFINITION: .aws/task-definition.json # Amazon ECS task definition
  CONTAINER_NAME: paperless-api-server # name of the container

jobs:
  deploy:
    name: Deploy to AWS ECS
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '_deploy_')

    steps:
      - name: Node version setup
        uses: actions/setup-node@v3.1.1
        with:
          node-version: 14.x

      - name: Checkout paperless-api-server
        uses: actions/checkout@v3

      - name: Checkout UI repo
        uses: actions/checkout@v3
        with:
          repository: rohandhamapurkar/plc-webapp
          path: './plc-webapp'

      - name: Build UI
        working-directory: plc-webapp
        run: |
          npm install
          npm run build
          cp -r dist ../client

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      # - name: Fill in the new image ID in the Amazon ECS task definition
      #   id: task-def
      #   uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
      #   with:
      #     task-definition: ${{ env.ECS_TASK_DEFINITION }}
      #     container-name: ${{ env.CONTAINER_NAME }}
      #     image: ${{ steps.build-image.outputs.image }}

      # - name: Deploy Amazon ECS task definition
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@de0132cf8cdedb79975c6d42b77eb7ea193cf28e
      #   with:
      #     task-definition: ${{ steps.task-def.outputs.task-definition }}
      #     service: ${{ env.ECS_SERVICE }}
      #     cluster: ${{ env.ECS_CLUSTER }}
      #     wait-for-service-stability: true
